name: Build
on:
  push:
    paths:
      - 'action-run/*'
  workflow_dispatch:


env:
  # Setting an environment variable with the value of a configuration variable
  UPSTREAM_REPO: ${{ vars.UPSTREAM_REPO }}
  UPSTREAM_WF: ${{ vars.UPSTREAM_WF }}
  UPSTREAM_BRANCH: ${{ vars.UPSTREAM_BRANCH }}
  UPSTREAM_ARTIFACT: ${{ vars.UPSTREAM_ARTIFACT }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        run: |
          mkdir -p ./extras
      -
        name: curl
        uses: wei/curl@v1
        env:
            APPLICATION_YAML: ${{ vars.APPLICATION_YAML }}
        with:
          args: -o ./extras/application-ignore.yml $APPLICATION_YAML
      -
        name: "Download Latest Lavalink.jar"
        run: |
          echo "Branch: $UPSTREAM_REPO  Branch: $UPSTREAM_BRANCH  WF: $UPSTREAM_WF Artifact: $UPSTREAM_ARTIFACT"
          RUN_ID=`gh run --repo "$UPSTREAM_REPO" list --branch "$UPSTREAM_BRANCH" --workflow "$UPSTREAM_WF" --json databaseId --jq .[0].databaseId`
          gh run --repo "$UPSTREAM_REPO" download $RUN_ID -n "$UPSTREAM_ARTIFACT" --dir ./extras
      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          # list of Docker images to use as base name for tags
          images: |
            drapersniper/pylav-node
            ghcr.io/drapersniper/pylav-node
          # generate Docker tags based on the following events/attributes
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Login to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          platforms: |
            linux/amd64
            linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
